/**
 * Workflowy Table-View Bookmarklet
 *
 * Bookmarklet that scrolls through (lazy-loads) all Workflowy bullets,
 * extracts custom metadata (including special #tags, times, @-mentions, backlinks),
 * then builds an interactive HTML table (sortable & filterable) at the top of the page.
 *
 * To use:
 *  - Copy the full code below (including the `javascript:(function(){...})();` wrapper).
 *  - Create a bookmark with this entire snippet as its "URL".
 *  - Click the bookmark while on a Workflowy page.
 *
 * Features:
 *  - Collapsible, refreshable table.
 *  - Column sorting by clicking on headers.
 *  - Per-column filters and a global filter for text-based matching.
 *  - Auto-loads Lucide icons from a CDN for nice icons in the interface.
 *
 * Safety:
 *  - Does NOT send data outside of your browser except for loading the icon library.
 *  - No permanent writes to your Workflowy data.
 *  - Strictly read-only from the perspective of your Workflowy content.
 */

javascript:(function(){

  /**
   * Display a temporary message using Workflowy's built-in WF.showMessage
   * if available, otherwise fallback to alert().
   *
   * @param {string} message - The message text to show.
   */
  function show(message) {
    if (typeof WF !== 'undefined' && WF.showMessage) {
      WF.showMessage(message);
      setTimeout(WF.hideMessage, 2000);
    } else {
      alert(message);
    }
  }


  /**
   * Attempt to parse a special tag that looks like "#p123" or "#abc-def".
   * This is used to store structured properties in columns.
   *
   * Examples:
   *   #p123 => ["P", "123"]
   *   #abc-def => ["abc", "def"]
   *
   * @param {string} tag - The raw string that starts with "#"
   * @returns {string[]|null} Returns a tuple [propertyName, propertyValue] or null if not a match.
   */
  function parseSpecialTag(tag) {
    // Remove the "#" from start
    const noHash = tag.replace(/^#/, '');

    // #p123 => store as property "P" = "123"
    if (/^[pP]\d+$/.test(noHash)) {
      return ["P", noHash.replace(/^[pP]/, '')];
    }

    // #abc-def => store as property "abc" = "def"
    if (/^[^-\s]+-[^-\s]+$/.test(noHash)) {
      const parts = noHash.split('-');
      return [parts[0], parts.slice(1).join('-')];
    }

    // Otherwise, not a recognized pattern
    return null;
  }


  /**
   * Remove all #tags from a text string and trim spaces.
   *
   * @param {string} text - The text that may contain "#tags".
   * @returns {string} Text with #tags removed.
   */
  function stripTags(text) {
    return text.replace(/#[^\s]+/g, '').trim();
  }


  /**
   * Sorts a table by a given column index, either ascending or descending.
   * If numeric, uses numeric comparison. Else uses case-insensitive string compare.
   *
   * @param {HTMLTableElement} table - The table DOM element to sort.
   * @param {number} colIndex - The column index (0-based).
   * @param {boolean} ascending - Sort ascending if true, descending if false.
   */
  function sortTableByColumn(table, colIndex, ascending) {
    const tBody = table.querySelector('tbody');
    const rows = Array.from(tBody.querySelectorAll('tr'));

    rows.sort((rowA, rowB) => {
      const cellA = rowA.children[colIndex].textContent.trim().toLowerCase();
      const cellB = rowB.children[colIndex].textContent.trim().toLowerCase();

      // Attempt numeric parse
      const numA = parseFloat(cellA);
      const numB = parseFloat(cellB);

      if (!isNaN(numA) && !isNaN(numB)) {
        return ascending ? (numA - numB) : (numB - numA);
      }

      // Fallback string compare
      return ascending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
    });

    // Re-append in sorted order
    rows.forEach(r => tBody.appendChild(r));
  }


  /**
   * A helper for building a single <td> cell with optional text content.
   *
   * @param {string|Node} content - The string or DOM Node to place in the cell.
   * @returns {HTMLTableCellElement} The <td> element.
   */
  function makeCell(content) {
    const cell = document.createElement('td');
    cell.style.border = '1px solid #ccc';
    cell.style.padding = '6px';

    if (typeof content === 'string') {
      content = document.createTextNode(content);
    }
    cell.appendChild(content);
    return cell;
  }


  /**
   * Scroll the page to force Workflowy to load all bullets in the selected area.
   * Repeatedly check if we've reached the end (stable scrollHeight).
   *
   * @param {Function} doneCallback - Called once the page is fully loaded (stable).
   */
  function loadAllBullets(doneCallback) {
    let oldScroll = 0;
    let stableCount = 0;
    const maxStable = 3;

    // Kick the page down to bottom
    window.scrollTo(0, document.body.scrollHeight);

    const intv = setInterval(() => {
      window.scrollTo(0, document.body.scrollHeight);
      const newScroll = document.body.scrollHeight;

      if (newScroll === oldScroll) {
        stableCount++;
      } else {
        stableCount = 0;
        oldScroll = newScroll;
      }

      // If stable for a few checks, we're done
      if (stableCount >= maxStable) {
        clearInterval(intv);
        doneCallback();
      }
    }, 800);
  }


  /**
   * Main function that gathers bullet info from the DOM, extracts relevant data,
   * then builds an HTML table placed before the root bullet. Also sets up
   * sorting & filtering behaviors, plus a top bar with controls.
   */
  function buildTable() {
    // The "root" bullet currently selected in Workflowy
    const root = document.querySelector('div[projectid].project.root.selected');
    if (!root) {
      show('No root bullet found!');
      return;
    }

    // The "title" for the table is taken from the root bullet's text
    const tableName = stripTags(root.querySelector('.innerContentContainer').textContent.trim());

    // Query for all bullet content
    const bulletSelector = '.innerContentContainer';
    const bulletEls = document.querySelectorAll(bulletSelector);

    // We'll build an array of structured info about each bullet
    const bulletDataList = [];

    // Used for collecting any #p123 or #abc-def property names
    const allProps = new Set();

    if (!bulletEls.length) {
      show('No bullets found!');
      return;
    }

    bulletEls.forEach(bulletEl => {
      const rawText = bulletEl.textContent.trim();
      // All #tags in the bullet
      const allHashTags = rawText.match(/#[^\s]+/g) || [];

      // Filter to see if there are any "special" tags recognized by parseSpecialTag()
      const recognizedTags = allHashTags.filter(t => parseSpecialTag(t));

      // If you only want bullets with recognized #p123 or #abc-def tags, skip bullets that have none
      // If you want to include *every* bullet, remove this if-statement.
      if (!recognizedTags.length) {
        return;
      }

      // We'll remove the #tags from the bullet's main text so the bulletText is "clean".
      let mainText = rawText;
      allHashTags.forEach(tg => {
        mainText = mainText.replace(tg, '').trim();
      });

      // Gather property name/value pairs from recognized tags
      const props = {};
      const leftoverTags = [];

      allHashTags.forEach(tag => {
        const parsed = parseSpecialTag(tag);
        if (parsed) {
          const [propName, propValue] = parsed;
          props[propName] = propValue;
          allProps.add(propName);
        } else {
          leftoverTags.push(tag);
        }
      });

      // The bullet's anchor link (the bullet itself)
      const projectDiv = bulletEl.closest('.project');
      const nameDiv = projectDiv ? projectDiv.querySelector('.name') : null;
      const bulletLinkEl = nameDiv ? nameDiv.querySelector('a.bullet') : null;
      if (!bulletLinkEl) {
        return;
      }
      const bulletHref = bulletLinkEl.getAttribute('href') || '';

      // Identify the bullet's parent project
      let parentProj = null;
      if (projectDiv && projectDiv.parentElement) {
        parentProj = projectDiv.parentElement.closest('.project');
      }

      let parentName = '';
      let parentHref = '';

      if (parentProj) {
        const parentNameDiv = parentProj.querySelector('.name .innerContentContainer');
        if (parentNameDiv) {
          parentName = stripTags(parentNameDiv.textContent.trim());
        }
        const parentLinkEl = parentProj.querySelector('.name a.bullet');
        if (parentLinkEl) {
          parentHref = parentLinkEl.getAttribute('href') || '';
        }
      }

      // ---------------------------------------------------------
      // NEW: Gather extra DOM-based data for each bullet.
      // ---------------------------------------------------------

      // 1) Date from <time class="monolith-pill">
      const timeEl = bulletEl.querySelector('time.monolith-pill');
      let dateVal = '';
      if (timeEl) {
        // Use displayed text or parse the startyear,startmonth,etc.
        // Here we choose to keep the user-friendly text, e.g. "Mon, Nov 25, 2024".
        dateVal = timeEl.textContent.trim();
      }

      // 2) @-mentions from <span class="contentTag" data-val^="@">
      const mentionEls = bulletEl.querySelectorAll('span.contentTag[data-val^="@"]');
      const mentionArr = Array.from(mentionEls).map(el => el.textContent.trim());
      const mentionsVal = mentionArr.join(', ');

      // 3) Backlinks from <a class="contentLink">
      const backlinkEls = bulletEl.querySelectorAll('a.contentLink');
      const backlinkArr = Array.from(backlinkEls).map(link => {
        const linkText = link.textContent.trim();
        const linkHref = link.getAttribute('href') || '';
        // Combining text|href for display
        return linkText + '|' + linkHref;
      });
      const backlinksVal = backlinkArr.join(', ');

      // Finally push this bullet data into the bulletDataList
      bulletDataList.push({
        parentName: parentName || '(no parent)',
        parentHref: parentHref,
        bulletText: mainText || '(no text)',
        bulletHref: bulletHref,
        tags: leftoverTags,
        properties: props,

        // Additional extracted fields
        date: dateVal,
        mentions: mentionsVal,
        backlinks: backlinksVal
      });
    });

    // If no bullets pass the filter, bail out
    if (!bulletDataList.length) {
      show('No bullets with special tags found!');
      return;
    }

    // Create a container for the entire table UI
    const container = document.createElement('div');
    container.className = 'customTableContainer';
    container.style.margin = '10px';
    container.style.display = 'flex';
    container.style.flexDirection = 'column';

    // Create a "top bar" containing the buttons and inputs
    const topBar = document.createElement('div');
    topBar.style.display = 'flex';
    topBar.style.alignItems = 'center';
    topBar.style.gap = '10px';

    // -------------------------------------------------
    // Collapsible toggle button
    // -------------------------------------------------
    const collapseBtn = document.createElement('button');
    collapseBtn.innerHTML = '<i data-lucide="chevrons-down-up" size="16" stroke-width="1"></i>';
    collapseBtn.style.cursor = 'pointer';
    collapseBtn.onclick = function () {
      const tbl = container.querySelector('table');
      if (tbl) {
        tbl.style.display = tbl.style.display === 'none' ? '' : 'none';
      }
    };

    // -------------------------------------------------
    // Refresh button (removes current table and reloads bullets)
    // -------------------------------------------------
    const refreshBtn = document.createElement('button');
    refreshBtn.innerHTML = '<i data-lucide="refresh-cw" size="16" stroke-width="1"></i>';
    refreshBtn.style.cursor = 'pointer';
    refreshBtn.onclick = function () {
      container.remove();
      loadAllBullets(buildTable);
    };

    // -------------------------------------------------
    // Add Table button (reloads bullets, adds a new table)
    // -------------------------------------------------
    const addTableBtn = document.createElement('button');
    addTableBtn.innerHTML = '<i data-lucide="plus" size="16" stroke-width="1"></i>';
    addTableBtn.style.cursor = 'pointer';
    addTableBtn.onclick = function () {
      loadAllBullets(buildTable);
      // If multiple tables exist, show them all
      document.querySelectorAll('.customTableContainer').forEach(tbl => {
        tbl.style.display = 'flex';
      });
    };

    // -------------------------------------------------
    // Table title
    // -------------------------------------------------
    const tableNameSpan = document.createElement('span');
    tableNameSpan.textContent = tableName;
    tableNameSpan.style.fontWeight = 'bold';
    tableNameSpan.style.marginLeft = '10px';

    // -------------------------------------------------
    // Global filter input (matches across ALL columns)
    // -------------------------------------------------
    const globalFilter = document.createElement('input');
    globalFilter.placeholder = 'Filter ALL columns...';
    globalFilter.style.flex = '1';
    globalFilter.style.padding = '4px';

    // -------------------------------------------------
    // Close button (removes table from DOM)
    // -------------------------------------------------
    const closeBtn = document.createElement('button');
    closeBtn.innerHTML = '<i data-lucide="x" size="16" stroke-width="1"></i>';
    closeBtn.style.cursor = 'pointer';
    closeBtn.onclick = function () {
      container.remove();
    };

    // Add all controls to top bar
    topBar.appendChild(collapseBtn);
    topBar.appendChild(refreshBtn);
    topBar.appendChild(tableNameSpan);
    topBar.appendChild(globalFilter);
    topBar.appendChild(closeBtn);
    topBar.appendChild(addTableBtn);
    container.appendChild(topBar);

    // -------------------------------------------------
    // Build the <table>, <thead>, <tbody>
    // -------------------------------------------------
    const table = document.createElement('table');
    table.style.width = '100%';
    table.style.borderCollapse = 'collapse';
    table.style.fontFamily = 'Arial,sans-serif';
    table.style.fontSize = '14px';
    table.style.margin = '20px 0';

    const thead = document.createElement('thead');
    const trHead = document.createElement('tr');
    const trFilter = document.createElement('tr');

    /**
     * Helper for creating a <th> cell with styling, used for sorting on click.
     *
     * @param {string} label - The column header text.
     * @returns {HTMLTableHeaderCellElement} <th> element
     */
    function makeHeadCell(label) {
      const th = document.createElement('th');
      th.textContent = label;
      th.style.border = '1px solid #ccc';
      th.style.padding = '6px';
      th.style.cursor = 'pointer';
      return th;
    }

    /**
     * Helper for creating the filter row cells (with an <input>).
     *
     * @returns {{td: HTMLTableCellElement, inp: HTMLInputElement}}
     */
    function makeFilterCell() {
      const td = document.createElement('td');
      td.style.border = '1px solid #ccc';
      td.style.padding = '3px';
      const inp = document.createElement('input');
      inp.style.width = '95%';
      inp.placeholder = 'Filter...';
      inp.style.padding = '2px';
      td.appendChild(inp);
      return { td, inp };
    }

    // Base columns that always appear
    let headers = [
      'Parent',
      'Bullet',
      'Tags',
      'Date',      // newly added
      '@s',        // newly added
      'Backlinks'  // newly added
    ];

    // Then add columns for each #property discovered (#p123, #abc-def, etc.)
    const propArray = Array.from(allProps);
    headers = headers.concat(propArray);

    // We'll track the input elements in an array for filtering usage
    const filterInputs = [];

    // Build the header row and filter row
    headers.forEach((headerText) => {
      const th = makeHeadCell(headerText);
      const filterCell = makeFilterCell();

      trHead.appendChild(th);
      trFilter.appendChild(filterCell.td);
      filterInputs.push(filterCell.inp);
    });

    thead.appendChild(trHead);
    thead.appendChild(trFilter);
    table.appendChild(thead);

    // Build the table body
    const tbody = document.createElement('tbody');

    bulletDataList.forEach(b => {
      const row = document.createElement('tr');

      // 1) Parent column (linked)
      const parentLink = document.createElement('a');
      parentLink.href = b.parentHref;
      parentLink.textContent = b.parentName;
      parentLink.style.color = 'blue';
      parentLink.style.textDecoration = 'underline';
      row.appendChild(makeCell(parentLink));

      // 2) Bullet column (linked)
      const bulletAnchor = document.createElement('a');
      bulletAnchor.href = b.bulletHref;
      bulletAnchor.textContent = b.bulletText;
      bulletAnchor.style.color = 'blue';
      bulletAnchor.style.textDecoration = 'underline';
      row.appendChild(makeCell(bulletAnchor));

      // 3) Tags column
      row.appendChild(makeCell(b.tags.join(' ')));

      // 4) Date column
      row.appendChild(makeCell(b.date));

      // 5) @s column
      row.appendChild(makeCell(b.mentions));

      // 6) Backlinks column
      row.appendChild(makeCell(b.backlinks));

      // Finally, any #properties columns
      propArray.forEach(propName => {
        row.appendChild(makeCell(b.properties[propName] || ''));
      });

      tbody.appendChild(row);
    });

    table.appendChild(tbody);
    container.appendChild(table);

    // Insert the container in the DOM, before the root bullet
    root.parentNode.insertBefore(container, root);

    // Set up column sorting on header click
    const headCells = trHead.querySelectorAll('th');
    headCells.forEach((hCell, colIndex) => {
      let ascending = true;
      hCell.onclick = () => {
        sortTableByColumn(table, colIndex, ascending);
        ascending = !ascending;
      };
    });

    /**
     * Filter the rows based on global + per-column filter values.
     * The global filter splits on commas, and also supports "!" for excludes.
     */
    function filterRows() {
      const allRows = tbody.querySelectorAll('tr');
      const globalVal = globalFilter.value.trim().toLowerCase();

      allRows.forEach(row => {
        const tds = row.querySelectorAll('td');
        let visible = true;

        // ---------------------------------------------------
        // 1) Global filter
        // ---------------------------------------------------
        if (globalVal) {
          const includeTerms = [];
          const excludeTerms = [];

          globalVal.split(',').forEach(term => {
            term = term.trim();
            if (term.startsWith('!')) {
              excludeTerms.push(term.slice(1).toLowerCase());
            } else {
              includeTerms.push(term.toLowerCase());
            }
          });

          // Must match at least one "include" if includes are present
          if (includeTerms.length > 0) {
            let matchInclude = false;
            includeTerms.forEach(term => {
              // If ANY cell contains it, it's a match
              if (Array.from(tds).some(td => td.textContent.toLowerCase().includes(term))) {
                matchInclude = true;
              }
            });
            if (!matchInclude) {
              visible = false;
            }
          }

          // Must exclude if ANY cell contains an exclude term
          if (excludeTerms.length > 0) {
            let matchExclude = false;
            excludeTerms.forEach(term => {
              if (Array.from(tds).some(td => td.textContent.toLowerCase().includes(term))) {
                matchExclude = true;
              }
            });
            if (matchExclude) {
              visible = false;
            }
          }
        }

        // ---------------------------------------------------
        // 2) Per-column filters
        // ---------------------------------------------------
        for (let c = 0; c < filterInputs.length; c++) {
          const filterVal = filterInputs[c].value.trim().toLowerCase();
          if (filterVal) {
            const includeTerms = [];
            const excludeTerms = [];
            filterVal.split(',').forEach(term => {
              term = term.trim();
              if (term.startsWith('!')) {
                excludeTerms.push(term.slice(1).toLowerCase());
              } else {
                includeTerms.push(term.toLowerCase());
              }
            });

            const cellText = tds[c].textContent.toLowerCase();

            // Must match at least one of the include terms
            if (includeTerms.length > 0) {
              let matchInclude = false;
              includeTerms.forEach(term => {
                if (cellText.includes(term)) {
                  matchInclude = true;
                }
              });
              if (!matchInclude) {
                visible = false;
                break;
              }
            }

            // Exclude if any exclude term matches
            if (excludeTerms.length > 0) {
              let matchExclude = false;
              excludeTerms.forEach(term => {
                if (cellText.includes(term)) {
                  matchExclude = true;
                }
              });
              if (matchExclude) {
                visible = false;
                break;
              }
            }
          }
        }

        // Apply final visibility
        row.style.display = visible ? '' : 'none';
      });
    }

    // Hook up filter inputs
    filterInputs.forEach(inp => {
      inp.oninput = filterRows;
    });
    globalFilter.oninput = filterRows;

    // Attempt to load lucide icons from the CDN. If they're already loaded, re-init.
    if (!window.lucide) {
      const sc = document.createElement('script');
      sc.src = 'https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.js';
      sc.onload = function () {
        if (window.lucide) {
          window.lucide.createIcons();
        }
      };
      document.head.appendChild(sc);
    } else {
      lucide.createIcons();
    }

    show('Done! Table built at top.');
    window.scrollTo(0, 0);
  }


  /**
   * Kicks off the bullet loading, then calls buildTable() upon completion.
   */
  function initTableCreation() {
    loadAllBullets(buildTable);
  }


  /**
   * Inserts a "table icon" button in the Workflowy header next to the Share button.
   * This button toggles showing/hiding the custom tables, or if none are present,
   * it triggers table creation.
   */
  function injectTableButton() {
    // Remove any existing table button to prevent duplicates
    const existingBtn = document.querySelector('.headerTableButton');
    if (existingBtn) {
      existingBtn.remove();
    }

    // The share button is used as an anchor to place our button next to
    const shareBtn = document.querySelector('.headerShareButton._3hmsj.iconButton.lg.shape-circle[data-handbook="sharing.share"]');
    if (!shareBtn) {
      show('Share button not found - cannot insert table icon.');
      return;
    }

    // Create the new button
    const tableBtn = document.createElement('div');
    tableBtn.className = 'headerTableButton _3hmsj iconButton lg shape-circle';
    tableBtn.style.cursor = 'pointer';
    tableBtn.innerHTML = '<i data-lucide="table-properties" size="16" stroke-width="1"></i>';

    tableBtn.onclick = function () {
      // If table(s) exist, toggle them
      const tables = document.querySelectorAll('.customTableContainer');
      if (tables.length > 0) {
        const isVisible = tables[0].style.display !== 'none';
        tables.forEach(tbl => {
          tbl.style.display = isVisible ? 'none' : 'flex';
        });
        show(isVisible ? 'All tables hidden' : 'All tables shown');
      } else {
        // Otherwise create a new table
        initTableCreation();
      }
    };

    // Insert our button before the share button
    shareBtn.parentNode.insertBefore(tableBtn, shareBtn);

    // Load lucide icons if needed
    if (!window.lucide) {
      const sc = document.createElement('script');
      sc.src = 'https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.js';
      sc.onload = function () {
        if (window.lucide) {
          window.lucide.createIcons();
        }
      };
      document.head.appendChild(sc);
    } else {
      lucide.createIcons();
    }
  }

  /**
   * Immediately run our injectTableButton to place the icon
   * in the Workflowy header whenever the bookmarklet is triggered.
   */
  injectTableButton();

})();
